Gromov-Wasserstein for Protein Morphology



Our approach is fundamentally geometric - we treat a protein as a point cloud given by its alpha Carbons. 
Our underlying approach does not require further information though it is useful to incorporate it.



Classes:
FGW_protein - this stores all of the relevant information about a protein that is needed for our computations
	Attributes:
	- name: str 
	- fasta: str - a string in the format of a fasta file containing a header and the sequence of the protein. Sequence has length n. 
	- coords: np.array of shape (n,3) - the coordinates of the CA atoms of the protein, ordered sequentially 
	- pI_list: list[float] - a list of estimated isoelectric points of the residues of the protein. List has length n. 
	- ipdm: np.array of shape (n,n) - intra-protein distance matrix, i,j entry is the (possibly scaled) distance between residues i and j. This is mutable can can change if distortion scaling is used.
	- scaled_flag: Bool - records whether the ipdm is the exact distance between residues or if it has been scaled.


gw_cython.GW_cell - this is from the earlier release of CAJAL which stores less data and allows for more efficient GW computations. This is only useful for basic GW and GW with distortion scaling. 



Variations:

- Downsampling
	- Computing the GW distance between two proteins with n aas has O(n^3) time complexity so we typically only use a subsample of the aas in our computations
	- The default approach is to use aas which are evenly spaced along the backbone, e.g. the 0th, 5th, 10th aas, and so on. 
	- There is also the option to manualy input which aas we choose to use

	Methods
	- downsample_n()
		returns a new FGW_protein object created by downsampling up to n evenly residues from self
	params:
		n: int  - maximum number to downsample to, if the protein has m ≤ n aas then it is downsampled to m
		pI_combination: Bool - whether to combine the isoelectric points
			False - the output's isoelectic points are just those of the downsampled residues
			True - the output's isoelectic points are calculated by combining segments of the original protein

		mean_sample: Bool - whether to use coordinates by averaging nearby coordinates or picking those of a single residue
		pI_alg: str - when using pI_combination, which method to use for estimating combine isoelectric points
		left_sample: Bool - when mean_sample == False, whether to use the leftmost (closest to start) residue in an evenly spaced segment or the median one

	- downsample_by_indices()
		returns a new FGW_protein object created by downsampling the input indices. This does not do any averaging or combination of isoelectric points, just returns a subset of the original data
		params:
			indices: list[int] - the indices selected







- Distortion Scaling
	- When comparing the shapes of molecules, we are generally more interested in atoms and substructures which are (geometrically) nearby one another as those are more likely to interact chemically. The GW formula overweights residues which are further apart. To counteract this, given a metric (measure) space X', we can replace it with a related metric (measure) space X' with the same set of points, in a way that increases the relative distance between nearby point.
	- If we then apply GW to modified spaces X' and Y', the resulting GW distance will better capture pairs of points in X or Y which are nearby.


	- We call a function f a scaling if: 
		- f(0) = 0
		- f is strictly monotonic increasing
		- f is concave down
	- Theorem - if f is a scaling function, then given a metric space X, X' defined as the same points as X and d_X'(x1,x2) = f(d_X(x1,x2)) is also a metric space and is homeomorphic to X
	- Theorem - let GW_f(X,Y) be GW(X',Y'), then GW_f defines a metric on isomorphism classes of metric measure spaces

	- We find that this scaling generally improve the performance of GW. In our tests the square root function usually works best and has the advantage of not requiring any user-determined parameters.

	Methods:
	scale_ipdm()
	modifies the ipdm inplace or returns a new FGW_protein object with the modified ipdm
	parameter:
	scaler: fun - the function to be used for distortion scaling. 
	inplace: Bool - whether to mutate self, or to return a new FGW_protein object 





- GW with sequence alignment 
	- We use Smith-Waterman local alignment from the fasta36 package to align pairs of proteins  (https://fasta.bioch.virginia.edu/wrpearson/fasta/fasta_guide.pdf)
		T. F. Smith and M. S. Waterman, (1981) J. Mol. Biol. 147:195-197; W.R. Pearson (1991) Genomics 11:635-650
	- v36.3.8/bin/ssearch36 -s BP62 -p -T 1 -b 1 -f 0 -g 0 -z -1 -m 9C
		- BLOSUM 62 matrix, protein sequences, single thread, return single output, zero gap openning or extending penalties, do not calculate statistics, CIGAR output format

    - Caution - when combining downsampling and sequence alignment, do not use the downsampling methods before sequence alignment. Instead the n paramater in run_FGW_seq_aln.

    methods:
    run_ssearch_indices()
    params 
    p1, p2 - the two FGW_protein objects it compares 
    allow_mismatch: Bool - whether to include when two different residues are aligned
    returns two lists of indices, those in p1 and those in p2

    run_FGW_seq_aln()
    p1, p2 - the two FGW_protein objects it compares 
    allow_mismatch: Bool - whether to include when two different residues are aligned
    alpha: float - tradeoff parameter for FGW
    n: int - maximum number of residues to include



    Applies run_ssearch_indices, takes up to n evenly spaced indices from those, then applies downsample_indices, then does FGW


- Fused Gromov-Wasserstein
	- FGW is a similar formula that incorporates extra data beyond the purely geometric data that GW uses
    - 
	- citation https://arxiv.org/abs/1811.02834
	- In principle practically any sort of information could be used, we have only done isoelectric points 

	



Usage

- How to interpret the outputs:
	- The outputs are a distance score - the larger the score the less similar two proteins are, if the distance is zero then the two proteins in theory should be identical *.
	- Unless sequence alignment is used the distances satisfy the triangle inequality *. That is to say GW(X,Y) + GW(Y,Z) ≥ GW(X,Z). 
	- The output distances can be used for k-NN, clustering, UMAP, and most other methods that take in distances/similarity scores as input. 
		- In most sklearn methods use metric = "precomputed"
	- There is no direct way to compare outputs from different variations. E.g. do not compare FGW(X,Y) to GW(X,Y), or GW with scaling to GW without. 

	* these are based on mathematical results, but as the actual code gives us an approximation to the GW mathematical formula, they often will not hold in practice, but usually hold up to a small error term. 

- Order of operations
	- Load data from pdb files
	- manipulate proteins: scale, convolve pI's, 
	- Downsample by indices if cutting out parts of proteins
	- if not using sequence alignment:
		 - downsample 
		 - run F/GW
	- if using sequence alignment
		- run F/GW and have downsampling rate as parameter

- parallelization
	- In general it is most efficient to run multiple GW computations in separate threads/processes then to use parallelization to speed up individual GW computations




